[
  {
    "objectID": "intro.html#what-you-will-learn",
    "href": "intro.html#what-you-will-learn",
    "title": "Kainos - Data & AI Engineering Academy",
    "section": "What you will learn",
    "text": "How each component of MLflow helps address challenges of the ML lifecycle.\n\nHow to use MLflow Tracking to record and query experiments: code, data, config, and results.\nHow to use MLflow Models general format to send models to diverse deployment tools.\nHow to use MLflow Tracking UI to visually compare and contrast experimental runs with different tuning parameters and evaluate metrics.\n\n\n\n\n\n\n\nNote\n\n\n\nThere are four MLflow components, viz., MLflow Tracking, MLflow Models, MLflow Projects and MLflow Registry.\nMLflow Models and MLflow Registry are out of scope for this training."
  },
  {
    "objectID": "intro.html#traditional-software-vs.-machine-learning",
    "href": "intro.html#traditional-software-vs.-machine-learning",
    "title": "Kainos - Data & AI Engineering Academy",
    "section": "Traditional Software vs. Machine Learning",
    "text": "Developing machine learning applications is complex, and the complexity doesn’t necessarity strive from the fact that the theory behind the machine learning is difficult, or the math is difficult or the algorithm which are presented are difficult. Although there is some element of complexity, the machine learning frameworks makes it easier by abstracting away the details and exposing a simple class interface to initialise and train the model. In fact the default paramters gives pretty much a good baseline model to work with.\n\n\n\n\n\n\n\nTraditional Software\nMachine Learning\n\n\n\n\nGoal: Meet a functional specification\nGoal: Optimize metric (e.g. accuracy) Constantly experiment to improve it.\n\n\nQuality depends only on code\nQuality depends on input data and tuning parmeters\n\n\nTypically pick one software stack w/ fewer libraries and tools\nCompare + combine many libraries, models\n\n\nLimited deployment environments\nDiverse deployment environments"
  },
  {
    "objectID": "intro.html#machine-learning-lifecycle",
    "href": "intro.html#machine-learning-lifecycle",
    "title": "Kainos - Data & AI Engineering Academy",
    "section": "Machine Learning Lifecycle",
    "text": "Following are four stages of a machine learning lifecycle, there can be other stages is between, but these are the paramount stages -\n\nData Ingestion - Depending on the nature of data you might use one of the many data technologies for staging the data e.g., Hadoop, Kafka, S3, Delta lake, etc.\nData Preparation - As per requirement and ease of use you might use a library in different language for preparing the data e.g., Spark, Pandas, Scikit-Learn, R, Java, etc.\nTraining - Depending on the problem and type of data you might use different libraries or framework for training the model e.g., Scikit-Learn, TensorFlow, PyTorch, Xgboost, etc.\nDeployment - Based on the type of model and how you want to serve the results there are many deployment options like Docker, Kubernetes, TensorFlow serving, Flask, etc.\n\n\n\n\nML steps to serve the model as a prediction service"
  },
  {
    "objectID": "intro.html#challenges-in-managing-machine-learning-lifecycle",
    "href": "intro.html#challenges-in-managing-machine-learning-lifecycle",
    "title": "Kainos - Data & AI Engineering Academy",
    "section": "Challenges in managing Machine Learning lifecycle",
    "text": "Each stage has it’s own requirements and tools\nSome stages (data preparation and training) rely on tuning parameters\nEach stage has it’s own scaling requirements\nEnsuring the same model that yielded optimal performance is deployed\nGovernance and provenance - how the model evolved, who used it, when it was used so on and so forth."
  },
  {
    "objectID": "intro.html#introducing-mlflow",
    "href": "intro.html#introducing-mlflow",
    "title": "Kainos - Data & AI Engineering Academy",
    "section": "Introducing MLflow",
    "text": "Open Machine Learning platform\n\nML Library and language agnostic framework - supports all popular ML libraries\nSupports both local and cloud development environments\nSimple and modular to use - can be simply infused into existing ML code\nEasy to get started, hence positive developer experience!"
  }
]